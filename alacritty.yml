shell:
    program: pwsh

selection:
    save_to_clipboard: false

window:
    dimensions:
        columns: 114   # DPI
        lines: 32
    padding:
        x: 15   # in Pixel
        y: 5
    dynamic_padding: false
    decorations: full   # full or none [and, on macOS, transparent or buttonless]
    scrolling:
        history: 300
        multiplier: 3

# background_opacity: 0.80

font:
    normal:
        family: Cica
        style: Regular
    bold:
        family: Cica
        style: Bold
    size: 12
    offset:
        x: 0
        y: 4
    glyph_offset:
        x: 0
        y: 0

cursor:
    style: Beam

draw_bold_text_with_bright_colors: true

bell:
    animation: EaseOutExpo
    color: '0xffffff'
    duration: 5

colors:
    primary:
        background: '0x14121b'
        foreground: '0xffffff'
    cursor:
        text: '0xF81CE5'
        cursor: '0xffffff'
    normal:
        black:   '0x000000'
        red:     '0xfe0100'
        green:   '0x33ff00'
        yellow:  '0xfeff00'
        blue:    '0x0066ff'
        magenta: '0xcc00ff'
        cyan:    '0x00ffff'
        white:   '0xd0d0d0'
    bright:
        black:   '0x808080'
        red:     '0xfe0100'
        green:   '0x33ff00'
        yellow:  '0xfeff00'
        blue:    '0x0066ff'
        magenta: '0xcc00ff'
        cyan:    '0x00ffff'
        white:   '0xFFFFFF'

mouse:
    double_click: { threshold: 300 }
    triple_click: { threshold: 300 }
    hide_when_typing: false


# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
    #- { key: V, mods: Control, action: Paste }
    #- { key: C, mods: Control, action: Copy }
    #- { key: Q,        mods: Alt,       action: Quit                       }
    #- { key: N,        mods: Alt,       action: SpawnNewInstance           }
    #- { key: Return,   mods: Alt,       action: ToggleFullscreen           }
    #- { key: Home,                      chars: "\x1bOH",  mode: AppCursor  }
    #- { key: Home,                      chars: "\x1b[H",  mode: ~AppCursor }
    #- { key: End,                       chars: "\x1bOF",  mode: AppCursor  }
    #- { key: End,                       chars: "\x1b[F",  mode: ~AppCursor }
    - { key: Equals,   mods: Alt,       action: IncreaseFontSize           }
    - { key: Minus,    mods: Alt,       action: DecreaseFontSize           }
    #- { key: Minus,    mods: Shift,     action: ResetFontSize              }
    #- { key: PageUp,   mods: Shift,     chars: "\x1b[5;2~"                 }
    #- { key: PageUp,   mods: Control,   chars: "\x1b[5;5~"                 }
    #- { key: PageUp,                    chars: "\x1b[5~"                   }
    #- { key: PageDown, mods: Shift,     chars: "\x1b[6;2~"                 }
    #- { key: PageDown, mods: Control,   chars: "\x1b[6;5~"                 }
    #- { key: PageDown,                  chars: "\x1b[6~"                   }
    #- { key: Left,     mods: Shift,     chars: "\x1b[1;2D"                 }
    #- { key: Left,     mods: Control,   chars: "\x1b[1;5D"                 }
    #- { key: Left,     mods: Alt,       chars: "\x1b[1;3D"                 }
    #- { key: Left,                      chars: "\x1b[D",  mode: ~AppCursor }
    #- { key: Left,                      chars: "\x1bOD",  mode: AppCursor  }
    #- { key: Right,    mods: Shift,     chars: "\x1b[1;2C"                 }
    #- { key: Right,    mods: Control,   chars: "\x1b[1;5C"                 }
    #- { key: Right,    mods: Alt,       chars: "\x1b[1;3C"                 }
    #- { key: Right,                     chars: "\x1b[C",  mode: ~AppCursor }
    #- { key: Right,                     chars: "\x1bOC",  mode: AppCursor  }
    #- { key: Up,       mods: Shift,     chars: "\x1b[1;2A"                 }
    #- { key: Up,       mods: Control,   chars: "\x1b[1;5A"                 }
    #- { key: Up,       mods: Alt,       chars: "\x1b[1;3A"                 }
    #- { key: Up,                        chars: "\x1b[A",  mode: ~AppCursor }
    #- { key: Up,                        chars: "\x1bOA",  mode: AppCursor  }
    #- { key: Down,     mods: Shift,     chars: "\x1b[1;2B"                 }
    #- { key: Down,     mods: Control,   chars: "\x1b[1;5B"                 }
    #- { key: Down,     mods: Alt,       chars: "\x1b[1;3B"                 }
    #- { key: Down,                      chars: "\x1b[B",  mode: ~AppCursor }
    #- { key: Down,                      chars: "\x1bOB",  mode: AppCursor  }
    #- { key: Tab,      mods: Shift,     chars: "\x1b[Z"                    }
    #- { key: F1,                        chars: "\x1bOP"                    }
    #- { key: F2,                        chars: "\x1bOQ"                    }
    #- { key: F3,                        chars: "\x1bOR"                    }
    #- { key: F4,                        chars: "\x1bOS"                    }
    #- { key: F5,                        chars: "\x1b[15~"                  }
    #- { key: F6,                        chars: "\x1b[17~"                  }
    #- { key: F7,                        chars: "\x1b[18~"                  }
    #- { key: F8,                        chars: "\x1b[19~"                  }
    #- { key: F9,                        chars: "\x1b[20~"                  }
    #- { key: F10,                       chars: "\x1b[21~"                  }
    #- { key: F11,                       chars: "\x1b[23~"                  }
    #- { key: F12,                       chars: "\x1b[24~"                  }
    #- { key: Back,                      chars: "\x7f"                      }
    #- { key: Back,     mods: Alt,       chars: "\x1b\x7f"                  }
    #- { key: Insert,                    chars: "\x1b[2~"                   }
    #- { key: Delete,                    chars: "\x1b[3~"                   }

    # shortcuts for tmux. the leader key is control-b (0x02)
#- { key: W,        mods: Command,       chars: "\x02&"}  # close tab (kill)
#- { key: T,        mods: Command,       chars: "\x02c"}  # new tab
#- { key: RBracket, mods: Command|Shift, chars: "\x02n"}  # select next tab
#- { key: LBracket, mods: Command|Shift, chars: "\x02p"}  # select previous tab
#- { key: RBracket, mods: Command,       chars: "\x02o"}  # select next pane
#- { key: LBracket, mods: Command,       chars: "\x02;"}  # select last pane
#- { key: F,        mods: Command,       chars: "\x02/"}  # search (upwards) (see tmux.conf)